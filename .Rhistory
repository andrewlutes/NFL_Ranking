####Plot Results
#New Plot Settings
opar<-par()
par(mfrow=c(2,2))
par(mar=c(0,0,0,0))
#Make Plots
image(k$estimate)
image(post)
plot(x[,1],x[,2], col=rgb(response,1-response,0,.08), pch=16)
plot(x[,1],x[,2], col=rgb(x$prob,0,1-x$prob,.2), pch=16)
#Restore old settings
par(opar)
}
hotSpot(x, response, h0=1, n=200)
hotSpot<-function(x, response, h0=1, n0=100){
#Prior Prob
p0<-mean(response)
#Conditional Density
k1<-kde(x[response==1,], h=h0, gridsize = n0, xmax=max(x), xmin=min(y))
#Prior Density
k<-kde(x, h=h0, gridsize= n0)
#Posterior density as a net across the known space
post<-p0*k1$estimate/k$estimate
#Give a smoothed probability value to the known population
x$prob=p0*predict(k1, x=x[,1:2])/predict(k, x=x[,1:2])
####Plot Results
#New Plot Settings
opar<-par()
par(mfrow=c(2,2))
par(mar=c(0,0,0,0))
#Make Plots
image(k$estimate)
image(post)
plot(x[,1],x[,2], col=rgb(response,1-response,0,.08), pch=16)
plot(x[,1],x[,2], col=rgb(x$prob,0,1-x$prob,.2), pch=16)
#Restore old settings
par(opar)
}
hotSpot(x, response, h0=1, n=200)
n0=10
x
kde(x[response==1,], gridsize = n0, xmax=max(x), xmin=min(y))
max(x)
xmin=min(y)
xmin
n0
x[response==1,]
kde(x[response==1,], gridsize = n0, xmax=max(x), xmin=min(y))
kde(x[response==1,])
kde(x[response==1,], xmax=max(x))
max(x[response==1,])
xmax
max(x)
sapply(data, max, na.rm = TRUE)
sapply(x, max, na.rm = TRUE)
k1<-kde(x[response==1,], gridsize = n0, xmax= sapply(x, max, na.rm = TRUE), xmin=sapply(x, min, na.rm = TRUE))
hotSpot<-function(x, response, h0=1, n0=100){
#Prior Prob
p0<-mean(response)
#Conditional Density
k1<-kde(x[response==1,], gridsize = n0, xmax= sapply(x, max, na.rm = TRUE), xmin=sapply(x, min, na.rm = TRUE))
#Prior Density
k<-kde(x, h=h0, gridsize= n0)
#Posterior density as a net across the known space
post<-p0*k1$estimate/k$estimate
#Give a smoothed probability value to the known population
x$prob=p0*predict(k1, x=x[,1:2])/predict(k, x=x[,1:2])
####Plot Results
#New Plot Settings
opar<-par()
par(mfrow=c(2,2))
par(mar=c(0,0,0,0))
#Make Plots
image(k$estimate)
image(post)
plot(x[,1],x[,2], col=rgb(response,1-response,0,.08), pch=16)
plot(x[,1],x[,2], col=rgb(x$prob,0,1-x$prob,.2), pch=16)
#Restore old settings
par(opar)
}
hotSpot(x, response, h0=1, n=200)
p0<-mean(response)
k1<-kde(x[response==1,], gridsize = n0, xmax= sapply(x, max, na.rm = TRUE), xmin=sapply(x, min, na.rm = TRUE))
k<-kde(x, h=h0, gridsize= n0)
post<-p0*k1$estimate/k$estimate
post
k1
k
#Conditional Density
k1<-kde(x[response==1,], gridsize = n0, xmax= sapply(x, max, na.rm = TRUE), xmin=sapply(x, min, na.rm = TRUE))
#Prior Density
k<-kde(x, h=h0, gridsize= n0, xmax= sapply(x, max, na.rm = TRUE), xmin=sapply(x, min, na.rm = TRUE))
#Posterior density as a net across the known space
post<-p0*k1$estimate/k$estimate
post
k1
k
k$eval.points
k1$eval.points
k1$estimate/k$estimate
k1$estimate
k$estimate
n0=100
#Conditional Density
k1<-kde(x[response==1,], gridsize = n0, xmax= sapply(x, max, na.rm = TRUE), xmin=sapply(x, min, na.rm = TRUE))
#Prior Density
k<-kde(x, h=h0, gridsize= n0, xmax= sapply(x, max, na.rm = TRUE), xmin=sapply(x, min, na.rm = TRUE))
#Posterior density as a net across the known space
post<-p0*k1$estimate/k$estimate
k1$estimate/k$estimate
image(post)
plot(x[,1],x[,2], col=rgb(x$prob,0,1-x$prob,.2), pch=16)
x$prob=p0*predict(k1, x=x[,1:2])/predict(k, x=x[,1:2])
x$prob
plot(x[,1],x[,2], col=rgb(x$prob,0,1-x$prob,.2), pch=16)
pmin(pmax(x$prob,0),1)
plot(x[,1],x[,2], col=rgb( pmin(pmax(x$prob,0),1),0,1- pmin(pmax(x$prob,0),1),.2), pch=16)
x0<-c(rnorm(n), rnorm(n,2,1))
y0<-c(rnorm(n), rnorm(n,2,1))
x=data.frame(x=x0,y=y0)
k<-kde(x, gridsize=10)
k<-kde2d(x,y,n=10)
k<-kde2d(x0,y0,n=10)
k$z
kd<-kde(x, gridsize=10)
kd2<-kde2d(x0,y0,n=10)
kd$estimate
kd2<-kde2d(x0,y0,n=10, h=.1)
kd2$z
kd2<-kde2d(x0,y0,n=10, h=.5)
kd2$z
kd2<-kde2d(x0,y0,n=10, h=.4)
kd2$z
kd2<-kde2d(x0,y0,n=10, h=.7)
kd2$z
kd$estimate
kd2<-kde2d(x0,y0,n=10, h=.66)
kd2$z
kd<-kde(x, gridsize=10, aprox.cont=FALSE)
kd<-kde(x, gridsize=10, approx.cont=FALSE)
kd$estimate
kd
kde
x
matrix(1,2,2)
x
matrix(1,2,10)
matrix(1,1000,2)
plotmixt(x, Sigmas=matrix(1,1000,2))
plotmixt(x, Sigmas=matrix(1,1000,2), props=c(.5,.5))
plotmixt(colmeans(x), Sigmas=matrix(1,1000,2), props=c(.5,.5))
c(51L, 51L)
install.packages("kernsmooth")
install.packages("KernSmooth")
install.packages("KernSmooth")
install.packages("KernSmooth")
library(KernSmooth)
x0
n<-100
x0<-c(rnorm(n), rnorm(n,2,1))
y0<-c(rnorm(n), rnorm(n,2,1))
x=data.frame(x=x0,y=y0)
response<-c(rep(0,n),rep(1,n))
kd<-kde(x, gridsize=10, approx.cont=FALSE)
library(MASS)
library(maps)
library(zipcode)
library(ks)
kd<-kde(x, gridsize=10, approx.cont=FALSE)
kd2<-kde2d(x0,y0,n=10, h=.66)
bkde2D(x, bandwidth, gridsize = c(10, 10))
library(MASS)
library(maps)
library(zipcode)
library(ks)
library(KernSmooth)
data(zipcode)
#Try a basic example with made up data
n<-100
x0<-c(rnorm(n), rnorm(n,2,1))
y0<-c(rnorm(n), rnorm(n,2,1))
x=data.frame(x=x0,y=y0)
response<-c(rep(0,n),rep(1,n))
h<-1
getwd()
library(MASS)
library(maps)
library(zipcode)
library(ks)
library(KernSmooth)
data(zipcode)
#Try a basic example with made up data
n<-100
x0<-c(rnorm(n), rnorm(n,2,1))
y0<-c(rnorm(n), rnorm(n,2,1))
x=data.frame(x=x0,y=y0)
response<-c(rep(0,n),rep(1,n))
h<-1
kd<-kde(x, gridsize=10, approx.cont=FALSE)
kd2<-kde2d(x0,y0,n=10, h=.66)
bkde2D(x, bandwidth=h, gridsize = c(10, 10))
kd2<-kde2d(x0,y0,n=10, h=h)
kd3<-bkde2D(x, bandwidth=h, gridsize = c(10, 10))
kd
kd2
kd3
plot(kd)
sm.density(x, h=h, model = "Normal")
library(sm)
sm.density(x, h=h, model = "Normal")
x
sm.density(x, h=h, model = "none")
sm.density(x, h=c(h,h), model = "none")
install.packages("rpanel")
sm.density(x, h=c(h,h), model = "none")
kd4<-sm.density(x, h=c(h,h), model = "none")
kd4
kd4<-sm.density(x, h=c(sqrt(h),sqrt(h)), model = "none")
sm.density(x, h=c(sqrt(h),sqrt(h)), model = "none")
kd4<-sm.density(x, h=c(10,10), model = "none")
kd4<-sm.density(x, h=c(.1,.1), model = "none")
kd4<-sm.density(x, h=c(.3,.3), model = "none")
kd4<-sm.density(x, h=c(.5,.5), model = "none")
kd4<-sm.density(x, h=c(.4,.4), model = "none")
kd4<-sm.density(x, h=c(1,1), model = "none")
kd4<-sm.density(x, h=c(2,2), model = "none")
kd4<-sm.density(x, h=c(2,2), model = "Normal")
kd4<-sm.density(x, h=c(.8,.8), model = "Normal")
names(kd4)
class(kd4)
class(kd)
class(kd2)
class(kd3)
class(kd4)
kd4<-sm.density(x, h=c(.8,.8), model = "Normal", group="response")
kd4<-sm.density(x, h=c(.8,.8), model = "Normal", group=response)
library(rgl)
sm.density(x, h=c(.8,.8))
display="rgl"
kd4<-sm.density(x, h=c(.8,.8))
sm.density(x, h=c(.8,.8))
getr3dDefaults()
par3d(rgl)
par3d()
sm.density(x, h=c(.8,.8))
par3d(display="rgl")
kd
n<-5
x0<-c(rnorm(n), rnorm(n,2,1))
y0<-c(rnorm(n), rnorm(n,2,1))
x=data.frame(x=x0,y=y0)
response<-c(rep(0,n),rep(1,n))
h<-1
#Compare the set of all types of 2-d density estimates
kd<-kde(x, gridsize=10, approx.cont=FALSE, xmax= sapply(x, max, na.rm = TRUE), xmin=sapply(x, min, na.rm = TRUE))
kd2<-kde2d(x0,y0,n=10, h=h, )
kd3<-bkde2D(x, bandwidth=h, gridsize = c(10, 10), )
kd4<-sm.density(x, h=c(.8,.8))
kd
#Try a basic example with made up data
n<-30
x0<-c(rnorm(n), rnorm(n,2,1))
y0<-c(rnorm(n), rnorm(n,2,1))
x=data.frame(x=x0,y=y0)
response<-c(rep(0,n),rep(1,n))
h<-1
#Compare the set of all types of 2-d density estimates
kd<-kde(x, gridsize=10, approx.cont=FALSE, xmax= sapply(x, max, na.rm = TRUE), xmin=sapply(x, min, na.rm = TRUE))
kd2<-kde2d(x0,y0,n=10, h=h)
kd3<-bkde2D(x, bandwidth=h, gridsize = c(10, 10), )
kd4<-sm.density(x, h=c(.8,.8))
kd
n<-100
x0<-c(rnorm(n), rnorm(n,2,1))
y0<-c(rnorm(n), rnorm(n,2,1))
x=data.frame(x=x0,y=y0)
response<-c(rep(0,n),rep(1,n))
h<-1
#Compare the set of all types of 2-d density estimates
kd<-kde(x, gridsize=10, approx.cont=FALSE, xmax= sapply(x, max, na.rm = TRUE), xmin=sapply(x, min, na.rm = TRUE))
kd2<-kde2d(x0,y0,n=10, h=h)
kd2
kd
n<-1000
x0<-c(rnorm(n), rnorm(n,2,1))
y0<-c(rnorm(n), rnorm(n,2,1))
x=data.frame(x=x0,y=y0)
response<-c(rep(0,n),rep(1,n))
h<-1
#Compare the set of all types of 2-d density estimates
kd<-kde(x, gridsize=10, approx.cont=FALSE, xmax= sapply(x, max, na.rm = TRUE), xmin=sapply(x, min, na.rm = TRUE))
kd2<-kde2d(x0,y0,n=10, h=h)
kd
matrix(1,2,2)
kd<-kde(x, gridsize=10, approx.cont=FALSE, xmax= sapply(x, max, na.rm = TRUE), xmin=sapply(x, min, na.rm = TRUE), H=matrix(1,2,2))
kd
n<-10
x0<-c(rnorm(n), rnorm(n,2,1))
y0<-c(rnorm(n), rnorm(n,2,1))
x=data.frame(x=x0,y=y0)
response<-c(rep(0,n),rep(1,n))
Hpi(x)
kd<-kde(x, gridsize=10, approx.cont=FALSE, xmax= sapply(x, max, na.rm = TRUE), xmin=sapply(x, min, na.rm = TRUE), H=matrix(.25,2,2))
kd
Hpi(x)
kd<-kde(x, gridsize=10, approx.cont=FALSE, xmax= sapply(x, max, na.rm = TRUE), xmin=sapply(x, min, na.rm = TRUE), H=cbind(c(.37,.197),c(.197,.584)))
kd
kd<-kde(x, gridsize=10, approx.cont=FALSE, xmax= sapply(x, max, na.rm = TRUE), xmin=sapply(x, min, na.rm = TRUE), H=cbind(c(.37,0),c(0,.584)))
kd
image(kd$estimate)
kd<-kde(x, gridsize=10, approx.cont=FALSE, xmax= sapply(x, max, na.rm = TRUE), xmin=sapply(x, min, na.rm = TRUE), H=cbind(c(.37,.2),c(.2,.584)))
image(kd$estimate)
kd<-kde(x, gridsize=10, approx.cont=FALSE, xmax= sapply(x, max, na.rm = TRUE), xmin=sapply(x, min, na.rm = TRUE), H=cbind(c(.37,.5),c(.5,.584)))
image(kd$estimate)
kd<-kde(x, gridsize=10, approx.cont=FALSE, xmax= sapply(x, max, na.rm = TRUE), xmin=sapply(x, min, na.rm = TRUE), H=cbind(c(.37,.3),c(.3,.584)))
image(kd$estimate)
kd<-kde(x, gridsize=10, approx.cont=FALSE, xmax= sapply(x, max, na.rm = TRUE), xmin=sapply(x, min, na.rm = TRUE), H=cbind(c(.37,0),c(0,.584)))
image(kd$estimate)
kd<-kde(x, gridsize=10, approx.cont=FALSE, xmax= sapply(x, max, na.rm = TRUE), xmin=sapply(x, min, na.rm = TRUE), H=cbind(c(.5,0),c(0,.5)))
image(kd$estimate)
n<-100
x0<-c(rnorm(n), rnorm(n,2,1))
y0<-c(rnorm(n), rnorm(n,2,1))
x=data.frame(x=x0,y=y0)
response<-c(rep(0,n),rep(1,n))
kd<-kde(x, gridsize=10, approx.cont=FALSE, xmax= sapply(x, max, na.rm = TRUE), xmin=sapply(x, min, na.rm = TRUE), H=cbind(c(.5,0),c(0,.5)))
image(kd$estimate)
n0<-100
kd<-kde(x, gridsize=n0, approx.cont=FALSE, xmax= sapply(x, max, na.rm = TRUE), xmin=sapply(x, min, na.rm = TRUE), H=cbind(c(.5,0),c(0,.5)))
image(kd$estimate)
kd<-kde(x, gridsize=n0, approx.cont=FALSE, xmax= sapply(x, max, na.rm = TRUE), xmin=sapply(x, min, na.rm = TRUE), H=cbind(c(.5,.2),c(.2,.5)))
image(kd$estimate)
kd<-kde(x, gridsize=n0, approx.cont=FALSE, xmax= sapply(x, max, na.rm = TRUE), xmin=sapply(x, min, na.rm = TRUE), H=cbind(c(.3,.2),c(.2,.6)))
Hpi(x)
image(kd$estimate)
kd<-kde(x, gridsize=n0, approx.cont=FALSE, xmax= sapply(x, max, na.rm = TRUE), xmin=sapply(x, min, na.rm = TRUE), H=cbind(c(.1,.2),c(.2,.1)))
image(kd$estimate)
kd<-kde(x, gridsize=n0, approx.cont=FALSE, xmax= sapply(x, max, na.rm = TRUE), xmin=sapply(x, min, na.rm = TRUE), H=cbind(c(.4,.2),c(.2,.4)))
image(kd$estimate)
kd<-kde(x, gridsize=n0, approx.cont=FALSE, xmax= sapply(x, max, na.rm = TRUE), xmin=sapply(x, min, na.rm = TRUE), H=cbind(c(.2,.2),c(.2,.2)))
image(kd$estimate)
kd<-kde(x, gridsize=n0, approx.cont=FALSE, xmax= sapply(x, max, na.rm = TRUE), xmin=sapply(x, min, na.rm = TRUE), H=cbind(c(.21,.2),c(.2,.21)))
image(kd$estimate)
kd<-kde(x, gridsize=n0, approx.cont=FALSE, xmax= sapply(x, max, na.rm = TRUE), xmin=sapply(x, min, na.rm = TRUE), H=cbind(c(.21,.1),c(.1,.21)))
image(kd$estimate)
kd$estimate
kd<-kde(x, gridsize=n0, approx.cont=FALSE, xmax= sapply(x, max, na.rm = TRUE), xmin=sapply(x, min, na.rm = TRUE), H=2*Hpi(x))
image(kd$estimate)
kd$estimate
min(kd$estimate)
kd<-kde(x, gridsize=n0, approx.cont=FALSE, xmax= sapply(x, max, na.rm = TRUE), xmin=sapply(x, min, na.rm = TRUE), H=.5*Hpi(x))
image(kd$estimate)
min(kd$estimate)
kd<-kde(x, gridsize=n0, approx.cont=FALSE, xmax= sapply(x, max, na.rm = TRUE), xmin=sapply(x, min, na.rm = TRUE), H=.1*Hpi(x))
image(kd$estimate)
kd3<-bkde2D(x, bandwidth=h, gridsize = c(n0,n0))
kd3
n0<-10
kd3<-bkde2D(x, bandwidth=h, gridsize = c(n0,n0))
kd3
map("state")
zipcode[sample(1:nrow(zipcode),n),]
zipcode[sample(1:nrow(zipcode),10),c()]
zipcode[sample(1:nrow(zipcode),10),]
zip<-zipcode[sample(1:nrow(zipcode),10),c("latitude","longitude")]
points(zip$latitude, zip$longitude)
zip$latitude
zip$longitude
points(1:10,1:10)
library(maptools)
install.packages("maptools")
library(maptools)
install.packages("rServe")
install.packages("Rserve")
library(Rserve)
zip<-zipcode[sample(1:nrow(zipcode),10000, replace=TRUE),c("latitude","longitude")]
zip
zip<-zipcode[sample(1:nrow(zipcode),10000, replace=TRUE),]
zip
zip<-zipcode[sample(1:nrow(zipcode),1000, replace=TRUE),]
zip$response=rep(500,c(1,0))
zip$response=rep(c(1,0),500)
Rserve()
write.csv(zip, "zip.csv")
length(zipcode)
nrow(zipcode)
names(zipcode)
zip<-zipcode[zipcode$state %in% c("VA","MD","DE","WV")]
zip<-zipcode[sample(1:nrow(zipcode),n, replace=TRUE),]
colMeans(zip)
mean(zip$lattitude)
mean(zip$lattitude, na.rm=TRUE)
mean(zip$latitude, na.rm=TRUE)
mean(zip$longitude, na.rm=TRUE)
zip
zip<-zipcode[zipcode$state %in% c("VA","MD","DE","WV")]
zip<-zip[sample(1:nrow(zipcode),n, replace=TRUE),]
zip<-zipcode[zipcode$state %in% c("VA","MD","DE","WV")]
zipcode
zip<-zipcode[zipcode$state %in% c("VA","MD","DE","WV")]
zip<-zipcode[zipcode$state %in% c("VA","MD","DE","WV"),]
zip<-zip[sample(1:nrow(zip),n, replace=TRUE),]
zip
scale(zip$latitude)^2+scale(zip$longitude)^2
hist(scale(zip$latitude)^2+scale(zip$longitude)^2 )
rnorm(n,2,2)
zip$response=ifelse(scale(zip$latitude)^2+scale(zip$longitude)^2 < rnorm(n,2,2), 1, 0)
write.csv(zip, "zip.csv")
n<-10000
zip<-zipcode[zipcode$state %in% c("VA","MD","DE","WV"),]
zip<-zip[sample(1:nrow(zip),n, replace=TRUE),]
zip
nrow(zip)
zip$response=ifelse(scale(zip$latitude)^2+scale(zip$longitude)^2 < rnorm(n,2,2), 1, 0)
unique(zip$zip)
length(unique(zip$zip))
write.csv(zip, "zip.csv")
nrow(zip)
zip$ID<-1:nrow(zip)
write.csv(zip, "zip.csv")
x<-cbind(zip$latitude,zip$longitude)
kde(x, h=1, gridsize= 10, xmax= sapply(x, max, na.rm = TRUE),
xmin=sapply(x, min, na.rm = TRUE))
sapply(x, max, na.rm = TRUE)
tapply(x, max, na.rm = TRUE)
c(max(x[,1]),max(x[,2]))
kde(x, h=1, gridsize= 10, xmax= c(max(x[,1]),max(x[,2])),
xmin=c(min(x[,1]),min(x[,2])))
hist(zip$latitude)
hist(zip$longitude)
hist(zip$longitude, breaks=100, xlim=c(-90,-70))
kde(x, h=1, gridsize= 10, xmax= c(41,-75),
xmin=c(36,-85))
plot(zip$longitude, zip$latitude, pch=16, col=rgb(1,0,0,.1))
plot(zip$longitude, zip$latitude, pch=16, col=rgb(1,0,0,.1), xlim=c(-90,-75), ylim=c(36,42))
plot(zip$longitude, zip$latitude, pch=16, col=rgb(1,0,0,.1), xlim=c(-84,-75), ylim=c(36,42))
plot(zip$longitude, zip$latitude, pch=16, col=rgb(1,0,0,.1), xlim=c(-84,-75), ylim=c(36,41))
kde(x, h=1, gridsize= 10, xmax= c(41,-75),
xmin=c(36,-84))
predict(k, x=x)
k<-kde(x, h=1, gridsize= 10, xmax= c(41,-75),
xmin=c(36,-84))
predict(k, x=x)
x<-cbind(zip$latitude,zip$longitude)
k<-kde(x, h=1, gridsize= 10, xmax= c(41,-75),
xmin=c(36,-84))
meanp(1,2)
pmean(1,2)
maxp(1,2)
pmax(1,2)
h<-.8
k<-kde(x, H=h*Hpi(x), gridsize= 10, xmax= c(41,-75),
xmin=c(36,-84))
Rserve()
library(Rserve)
Rserve()
Rserve()
library(Rserve)
Rserve()
library(Rserve)
Rserve()
x<-cbind(zip$latitude,zip$longitude)
k<-kde(x, H=h*Hpi(x), gridsize= 10, xmax= c(41,-75),
xmin=c(36,-84))
library(ks)
k<-kde(x, H=h*Hpi(x), gridsize= 10, xmax= c(41,-75),
xmin=c(36,-84))
k<-kde(x, gridsize= 10, xmax= c(41,-75),
xmin=c(36,-84))
k<-kde(x, gridsize= 5, xmax= c(41,-75),
xmin=c(36,-84))
k1<-kde(x[response>.5,], gridsize= 10, xmax= c(41,-75),
xmin=c(36,-84))
p0<-mean(response)
p0*predict(k1, x=x)/predict(k, x=x)
Rserve()
library(maps)
library(rgl)
map<-map('state')
map3d <- function(map, ...){
if(length(map$tiles)!=1){stop("multiple tiles not implemented") }
nx = map$tiles[[1]]$xres
ny = map$tiles[[1]]$yres
xmin = map$tiles[[1]]$bbox$p1[1]
xmax = map$tiles[[1]]$bbox$p2[1]
ymin = map$tiles[[1]]$bbox$p1[2]
ymax = map$tiles[[1]]$bbox$p2[2]
xc = seq(xmin,xmax,len=ny)
yc = seq(ymin,ymax,len=nx)
colours = matrix(map$tiles[[1]]$colorData,ny,nx)
m = matrix(0,ny,nx)
surface3d(xc,yc,m,col=colours, ...)
}
map3d(map)
map$tiles
install.packages("rCharts")
load(nycflights13)
install.packages("nycflights13")
install.packages("rcharts")
install_github('rCharts', 'ramnathv')
library(devtools)
install_github('rCharts', 'ramnathv')
library(devtools)
library(roxygen2)
install.packages("roxygen2")
library(roxygen2)
install_github("NFL_Ranking")
install_github('NFL_Ranking','andrewlutes')
install_github('andrewlutes/NFL_Ranking')
getwd()
setwd("C:/Users/andrew.lutes/Desktop/Project/Football/NFL_Ranking")
create("Ratings")
