train$Weight=1
}
train$Weight= train$Weight+((train$home_win*2-1)*homeAdv)
train$Weight=train$Weight*(1-timeDep)^(wk-train$WEEK)
#Attach Social Network Measurements
g1 <- graph.data.frame(data.frame(from=train$Loser, to=train$Winner, weight=train$Weight))
adj=get.adjacency(g1, sparse=FALSE, attr="weight")
exp<-expWin(adj, schedDep=sched)
test<-attach_Pred_Matrix(test,exp[[1]], "adj")
test<-attach_Pred_Rank(test,exp[[2]], "exp")
#Append this season
SEAShistory=rbind(SEAShistory, test)
cat(wk," ")
}
}
return(SEAShistory)
}
history<-addPred()
expWin <- function(adj, schedDep=1){
library(expm)
#Exponential Adjacency matrix
expAdj=expm(schedDep*adj)-diag(dim(adj)[1])
#Exponential based win pct
expAdj=expAdj/(expAdj+t(expAdj)) #Scale so that each cell represents a unit probability
#Find the exponential win and loss record for each team
Exp=data.frame(name=row.names(adj), win=colSums(expAdj, na.rm=TRUE), loss=rowSums(expAdj, na.rm=TRUE))
#Scale to find exponential win percentage
Exp=as.numeric(Exp$win/(Exp$win+Exp$loss))
names(Exp)<-row.names(adj)
return(list(expAdj, Exp))
}
history<-addPred()
exp.roc=roc(formula=home_win~expdiff, data=history)
win.roc=roc(formula=home_win~winp, data=history)
adj.roc=roc(formula=home_win~adjdiff, data=history)
plot.roc(exp.roc)
plot.roc(win.roc, add=TRUE, col="red")
plot.roc(adj.roc, add=TRUE, col="blue")
history<-addPred(timeDep=.05, ptWeight=TRUE, homeAdv=0.1, sched=0.8)
exp.roc=roc(formula=home_win~expdiff, data=history)
win.roc=roc(formula=home_win~winp, data=history)
adj.roc=roc(formula=home_win~adjdiff, data=history)
plot.roc(exp.roc)
plot.roc(win.roc, add=TRUE, col="red")
plot.roc(adj.roc, add=TRUE, col="blue")
history<-addPred(timeDep=.05, ptWeight=TRUE, homeAdv=2.2, sched=0.5)
exp.roc=roc(formula=home_win~expdiff, data=history)
win.roc=roc(formula=home_win~winp, data=history)
adj.roc=roc(formula=home_win~adjdiff, data=history)
plot.roc(exp.roc)
plot.roc(win.roc, add=TRUE, col="red")
plot.roc(adj.roc, add=TRUE, col="blue")
history<-addPred(timeDep=0, ptWeight=TRUE, homeAdv=0, sched=1)
exp.roc=roc(formula=home_win~expdiff, data=history)
win.roc=roc(formula=home_win~winp, data=history)
adj.roc=roc(formula=home_win~adjdiff, data=history)
plot.roc(exp.roc)
plot.roc(win.roc, add=TRUE, col="red")
plot.roc(adj.roc, add=TRUE, col="blue")
history<-addPred(timeDep=0.05, ptWeight=TRUE, homeAdv=0, sched=1)
exp.roc=roc(formula=home_win~expdiff, data=history)
win.roc=roc(formula=home_win~winp, data=history)
adj.roc=roc(formula=home_win~adjdiff, data=history)
plot.roc(exp.roc)
plot.roc(win.roc, add=TRUE, col="red")
plot.roc(adj.roc, add=TRUE, col="blue")
history<-addPred(timeDep=0.2, ptWeight=TRUE, homeAdv=0, sched=1)
exp.roc=roc(formula=home_win~expdiff, data=history)
win.roc=roc(formula=home_win~winp, data=history)
adj.roc=roc(formula=home_win~adjdiff, data=history)
plot.roc(exp.roc)
plot.roc(win.roc, add=TRUE, col="red")
plot.roc(adj.roc, add=TRUE, col="blue")
history<-addPred(timeDep=0.05, ptWeight=TRUE, homeAdv=2, sched=1)
history<-addPred(timeDep=0.05, ptWeight=TRUE, homeAdv=2, sched=1)
history<-addPred(timeDep=0.05, ptWeight=TRUE, homeAdv=.5, sched=1)
exp.roc=roc(formula=home_win~expdiff, data=history)
win.roc=roc(formula=home_win~winp, data=history)
adj.roc=roc(formula=home_win~adjdiff, data=history)
plot.roc(exp.roc)
plot.roc(win.roc, add=TRUE, col="red")
plot.roc(adj.roc, add=TRUE, col="blue")
history<-addPred(timeDep=0.05, ptWeight=TRUE, homeAdv=.5, sched=.5)
exp.roc=roc(formula=home_win~expdiff, data=history)
win.roc=roc(formula=home_win~winp, data=history)
adj.roc=roc(formula=home_win~adjdiff, data=history)
plot.roc(exp.roc)
plot.roc(win.roc, add=TRUE, col="red")
plot.roc(adj.roc, add=TRUE, col="blue")
library(rServe)
library(rserve)
library(Rserve)
rServe(Rserve)
Rserve()
x<-rnorm(100)
y<-rnorm(100)
x<-cbind(x,y)
kmeans(x,2)
k<kmeans(x,2)
k<-kmeans(x,2)
k$clusters
k$cluster
x<-10*rnorm(100)
y<-rnorm(100)
k<-kmeans(cbind(x,y),2)
plot(x,y,col=k$cluster)
k<-kmeans(scale(cbind(x,y)),2)
k$cluster
plot(x,y,col=k$cluster)
scale(cbind(x,y))
x<-10*rnorm(100)
y<-rnorm(100)
k<-kmeans(scale(cbind(x,y)),2)
k$cluster
plot(x,y,col=k$cluster)
x<-10*rnorm(100)
y<-rnorm(100)
k<-kmeans(scale(cbind(x,y)),2)
k$cluster
plot(x,y,col=k$cluster)
x<-10*rnorm(100)
y<-rnorm(100)
k<-kmeans(scale(cbind(x,y)),2)
k$cluster
plot(x,y,col=k$cluster)
x<-10*rnorm(100)
y<-rnorm(100)
k<-kmeans(scale(cbind(x,y)),2)
k$cluster
plot(x,y,col=k$cluster)
library(zipcode)
zip<-zipcode[zipcode$state %in% c("VA","MD","DE","WV"),]
write.csv(zip, "zip.csv")
zip
zipcode
data(zipcode)
zip<-zipcode[zipcode$state %in% c("VA","MD","DE","WV"),]
write.csv(zip, "zip.csv")
getwd()
zipcode
names(zipcode)
table(zipcode$state)
setwd("C:\\Users\\andrew.lutes\\Desktop\\Tech Talks")
zip<-zipcode[zipcode$state %in% c("DC"),]
write.csv(zip, "zip.csv")
zip
food<-read.csv("client_Location.csv")
summary(food)
hist(as.numeric(lat))
hist(as.numeric(food$lat))
#Gives you the number of paths of lengths 1:n for adjacency matrix A
pow2<-function(n, A, A1){
dir<-rep(0,length(n))
undir<-rep(0,length(n))
for (i in 1:length(n)){
dir[i]<-sum(A %^% n[i])
undir[i]<-sum(A1 %^% n[i])
}
return(cbind(dir,undir))
}
games<- read.csv("C:/Users/andrew.lutes/Desktop/Project/Football/NFL_Ranking/NFL_Games.csv")
games<-games %>% filter(SEAS == 2013)
library(dplyr)
games<-games %>% filter(SEAS == 2013)
gamesp<-createPerfectSeasons(1)
gamesr<-createRandomSeasons(1,  home_adv=0,  variance=3)
games<- read.csv("C:/Users/andrew.lutes/Desktop/Project/Football/NFL_Ranking/NFL_Games.csv")
games<-games %>% filter(SEAS == 2013)
createPerfectSeasons=function(numSeasons){
#Create a shell schedule based on NFL 2013 season
games<- read.csv("C:/Users/andrew.lutes/Desktop/Project/Football/NFL_Ranking/NFL_Games.csv")
games=games[games$WEEK<18 & games$SEAS==2013,]
games=games[c("GID", "SEAS", "WEEK", "V", "H")]
history=NULL
for(season in 1:numSeasons){
#Assign strengths to each of the teams and add to games
teams=data.frame(name=unique(games$H), Strength=rnorm(32,0,1))
games$hStrength=teams$Strength[match(games$H,teams$name)]
games$vStrength=teams$Strength[match(games$V,teams$name)]
games$home_win=ifelse(games$hStrength>games$vStrength, 1, 0) #Assign Winners Based on Strength
games$ptDiff=games$hStrength-games$vStrength
games$SEAS=season
history=rbind(history,games)
}
history$Winner=ifelse(history$home_win==1,history$H,history$V)
history$Loser=ifelse(history$home_win==0,history$H,history$V)
return(history)
}
createRandomSeasons=function(numSeasons,  home_adv=0,  variance=1){
games<- read.csv("C:/Users/andrew.lutes/Desktop/Project/Football/NFL_Ranking/NFL_Games.csv")
games=games[games$WEEK<18 & games$SEAS==2013,]
games=games[c("GID", "SEAS", "WEEK", "V", "H")]
history=NULL
len<-nrow(games)
for(season in 1:numSeasons){
#Assign strengths to each of the teams and add to games
teams=data.frame(name=unique(games$H), Strength=rnorm(32,0,1))
games$hStrength=teams$Strength[match(games$H,teams$name)]
games$vStrength=teams$Strength[match(games$V,teams$name)]
games$hRand=rnorm(len,games$hStrength, rep(variance,len))
games$vRand=rnorm(len,games$vStrength, rep(variance,len))
games$home_win=ifelse(games$hRand+home_adv>games$vRand, 1, 0)   #Create winners adding an elemnt of randomness and homefield advantage
games$ptDiff=games$hRand-games$vRand
games$Win_Margin=abs(games$ptDiff)
games$SEAS=season
history=rbind(history,games)
}
history$Winner=ifelse(history$home_win==1,history$H,history$V)
history$Loser=ifelse(history$home_win==0,history$H,history$V)
return(history)
}
games<- read.csv("C:/Users/andrew.lutes/Desktop/Project/Football/NFL_Ranking/NFL_Games.csv")
games<-games %>% filter(SEAS == 2013)
gamesp<-createPerfectSeasons(1)
gamesr<-createRandomSeasons(1,  home_adv=0,  variance=3)
randomSeas<-plotGrowth(gamesr)
perfSeas<-plotGrowth(gamesp)
plotGrowth=function(games){
g <- graph.data.frame(data.frame(from=games$Loser, to=games$Winner), directed=TRUE)
g1 <- graph.data.frame(data.frame(from=games$Loser, to=games$Winner), directed=FALSE)
A=get.adjacency(g, sparse=FALSE)
A1=get.adjacency(g1, sparse=FALSE)
####Examine relative growth fuctions
x<-1:20
df<-data.frame(x, pow2(x, A, A1), scale=2^x)
#lines(df$scale*df$dir/df$undir, type="l")
return(df)
}
randomSeas<-plotGrowth(gamesr)
perfSeas<-plotGrowth(gamesp)
plot(perfSeas$scale*perfSeas$dir/perfSeas$undir, type="l")
library(igraph)
gamesp<-createPerfectSeasons(1)
gamesr<-createRandomSeasons(1,  home_adv=0,  variance=3)
randomSeas<-plotGrowth(gamesr)
library(expm)
plot(perfSeas$scale*perfSeas$dir/perfSeas$undir, type="l")
randomSeas<-plotGrowth(gamesr)
perfSeas<-plotGrowth(gamesp)
plot(perfSeas$scale*perfSeas$dir/perfSeas$undir, type="l")
lines(randomSeas$scale*randomSeas$dir/randomSeas$undir)
for(i in c(0.1,.5,1,2,5,10,1000)){
gamesr<-createRandomSeasons(1,  home_adv=0,  variance=i)
randomSeas<-plotGrowth(gamesr)
lines(randomSeas$scale*randomSeas$dir/randomSeas$undir)
}
games<- read.csv("C:/Users/andrew.lutes/Desktop/Project/Football/NFL_Ranking/NFL_Games.csv")
games<-games %>% filter(SEAS == 2013)
Seas<-plotGrowth(games)
lines(Seas$scale*Seas$dir/Seas$undir, col="red")
for(i in 2001:2013){
games<- read.csv("C:/Users/andrew.lutes/Desktop/Project/Football/NFL_Ranking/NFL_Games.csv")
seas<-games %>% filter(SEAS == i)
Seas<-plotGrowth(seas)
lines(Seas$scale*Seas$dir/Seas$undir, col="red")
}
plot(perfSeas$scale*perfSeas$dir/perfSeas$undir, type="l")
for(i in 2001:2013){
games<- read.csv("C:/Users/andrew.lutes/Desktop/Project/Football/NFL_Ranking/NFL_Games.csv")
seas<-games %>% filter(SEAS == i)
Seas<-plotGrowth(seas)
lines(Seas$scale*Seas$dir/Seas$undir, col="red")
}
gamesr<-createRandomSeasons(1,  home_adv=0,  variance=999999)
randomSeas<-plotGrowth(gamesr)
lines(randomSeas$scale*randomSeas$dir/randomSeas$undir)
gamesr<-createRandomSeasons(1,  home_adv=0,  variance=5)
randomSeas<-plotGrowth(gamesr)
lines(randomSeas$scale*randomSeas$dir/randomSeas$undir)
gamesr<-createRandomSeasons(1,  home_adv=0,  variance=1)
randomSeas<-plotGrowth(gamesr)
lines(randomSeas$scale*randomSeas$dir/randomSeas$undir)
gamesr<-createRandomSeasons(1,  home_adv=0,  variance=2)
randomSeas<-plotGrowth(gamesr)
lines(randomSeas$scale*randomSeas$dir/randomSeas$undir)
perfSeas
gamesp<-createPerfectSeasons(1)
perfSeas<-plotGrowth(gamesp)
perfSeas
gamesp<-createPerfectSeasons(1)
perfSeas<-plotGrowth(gamesp)
plot(perfSeas$scale*perfSeas$dir/perfSeas$undir, type="l")
gamesp<-createPerfectSeasons(1)
perfSeas<-plotGrowth(gamesp)
lines(perfSeas$scale*perfSeas$dir/perfSeas$undir, type="l")
gamesp<-createPerfectSeasons(1)
perfSeas<-plotGrowth(gamesp)
lines(perfSeas$scale*perfSeas$dir/perfSeas$undir, type="l")
gamesp<-createPerfectSeasons(1)
perfSeas<-plotGrowth(gamesp)
lines(perfSeas$scale*perfSeas$dir/perfSeas$undir, type="l")
gamesp<-createPerfectSeasons(1)
perfSeas<-plotGrowth(gamesp)
lines(perfSeas$scale*perfSeas$dir/perfSeas$undir, type="l")
gamesp<-createPerfectSeasons(1)
perfSeas<-plotGrowth(gamesp)
lines(perfSeas$scale*perfSeas$dir/perfSeas$undir, type="l")
gamesp<-createPerfectSeasons(1)
perfSeas<-plotGrowth(gamesp)
lines(perfSeas$scale*perfSeas$dir/perfSeas$undir, type="l")
gamesp<-createPerfectSeasons(1)
perfSeas<-plotGrowth(gamesp)
lines(perfSeas$scale*perfSeas$dir/perfSeas$undir, type="l")
gamesp<-createPerfectSeasons(1)
perfSeas<-plotGrowth(gamesp)
lines(perfSeas$scale*perfSeas$dir/perfSeas$undir, type="l")
gamesp<-createPerfectSeasons(1)
perfSeas<-plotGrowth(gamesp)
lines(perfSeas$scale*perfSeas$dir/perfSeas$undir, type="l")
gamesp<-createPerfectSeasons(1)
perfSeas<-plotGrowth(gamesp)
lines(perfSeas$scale*perfSeas$dir/perfSeas$undir, type="l")
gamesp<-createPerfectSeasons(1)
perfSeas<-plotGrowth(gamesp)
lines(perfSeas$scale*perfSeas$dir/perfSeas$undir, type="l")
gamesp<-createPerfectSeasons(1)
perfSeas<-plotGrowth(gamesp)
lines(perfSeas$scale*perfSeas$dir/perfSeas$undir, type="l")
gamesp<-createPerfectSeasons(1)
perfSeas<-plotGrowth(gamesp)
lines(perfSeas$scale*perfSeas$dir/perfSeas$undir, type="l")
gamesp<-createPerfectSeasons(1)
perfSeas<-plotGrowth(gamesp)
lines(perfSeas$scale*perfSeas$dir/perfSeas$undir, type="l")
gamesp<-createPerfectSeasons(1)
perfSeas<-plotGrowth(gamesp)
lines(perfSeas$scale*perfSeas$dir/perfSeas$undir, type="l")
gamesp<-createPerfectSeasons(1)
perfSeas<-plotGrowth(gamesp)
lines(perfSeas$scale*perfSeas$dir/perfSeas$undir, type="l")
gamesp<-createPerfectSeasons(1)
perfSeas<-plotGrowth(gamesp)
lines(perfSeas$scale*perfSeas$dir/perfSeas$undir, type="l")
gamesp<-createPerfectSeasons(1)
perfSeas<-plotGrowth(gamesp)
lines(perfSeas$scale*perfSeas$dir/perfSeas$undir, type="l")
gamesp<-createPerfectSeasons(1)
perfSeas<-plotGrowth(gamesp)
lines(perfSeas$scale*perfSeas$dir/perfSeas$undir, type="l")
gamesp<-createPerfectSeasons(1)
perfSeas<-plotGrowth(gamesp)
lines(perfSeas$scale*perfSeas$dir/perfSeas$undir, type="l")
gamesp<-createPerfectSeasons(1)
perfSeas<-plotGrowth(gamesp)
lines(perfSeas$scale*perfSeas$dir/perfSeas$undir, type="l")
gamesp<-createPerfectSeasons(1)
perfSeas<-plotGrowth(gamesp)
lines(perfSeas$scale*perfSeas$dir/perfSeas$undir, type="l")
gamesp<-createPerfectSeasons(1)
perfSeas<-plotGrowth(gamesp)
lines(perfSeas$scale*perfSeas$dir/perfSeas$undir, type="l")
gamesp<-createPerfectSeasons(1)
perfSeas<-plotGrowth(gamesp)
lines(perfSeas$scale*perfSeas$dir/perfSeas$undir, type="l")
gamesp<-createPerfectSeasons(1)
perfSeas<-plotGrowth(gamesp)
lines(perfSeas$scale*perfSeas$dir/perfSeas$undir, type="l")
perfSeas
for(i in 1:30){
gamesr<-createRandomSeasons(1,  home_adv=0,  variance=2)
randomSeas<-plotGrowth(gamesr)
lines(randomSeas$scale*randomSeas$dir/randomSeas$undir, col=alpha("red",.2))
}
library(scales)
for(i in 1:30){
gamesr<-createRandomSeasons(1,  home_adv=0,  variance=2)
randomSeas<-plotGrowth(gamesr)
lines(randomSeas$scale*randomSeas$dir/randomSeas$undir, col=alpha("red",.2))
}
for(i in 1:50){
gamesr<-createRandomSeasons(1,  home_adv=0,  variance=2)
randomSeas<-plotGrowth(gamesr)
lines(randomSeas$scale*randomSeas$dir/randomSeas$undir, col=alpha("red",.2))
}
for(i in 1:50){
gamesr<-createRandomSeasons(1,  home_adv=0,  variance=3)
randomSeas<-plotGrowth(gamesr)
lines(randomSeas$scale*randomSeas$dir/randomSeas$undir, col=alpha("blue",.2))
}
recordDist<-function(games){
teams<-sqldf("Select distinct H Team from games")
teams<- sqldf("Select Team,
sum(case when Team=games.H then home_win else (1-home_win) end)/cast(count(*) as double) Winp
from teams join games on teams.Team=games.H or teams.Team=games.V
group by Team")
return(teams)
}
recordDist(gamesp)
library(sqldf)
gamesp<-createPerfectSeasons(1)
recordDist(gamesp)
plot(density(recordDist(gamesp)$Winp))
plot(density(recordDist(gamesr)$Winp))
plot(density(recordDist(gamesp)$Winp))
lines(density(recordDist(gamesr)$Winp))
plot(density(recordDist(gamesr)$Winp))
for(i in 1:20){
gamesp<-createPerfectSeasons(1)
lines(density(recordDist(gamesp)$Winp), col"blue")
}
for(i in 1:20){
gamesp<-createPerfectSeasons(1)
lines(density(recordDist(gamesp)$Winp), col"blue")
}
for(i in 1:20){
gamesp<-createPerfectSeasons(1)
lines(density(recordDist(gamesp)$Winp), col="blue")
}
for(i in 1:20){
gamesr<-createRandomSeasons(1,  home_adv=0,  variance=3)
lines(density(recordDist(gamesr)$Winp), col="red")
}
for(i in 1:20){
gamesr<-createRandomSeasons(1,  home_adv=0,  variance=2)
lines(density(recordDist(gamesr)$Winp), col="green")
}
plot(density(recordDist(gamesr)$Winp))
for(i in 1:20){
gamesp<-createPerfectSeasons(1)
lines(density(recordDist(gamesp)$Winp), col="blue")
}
for(i in 1:20){
gamesr<-createRandomSeasons(1,  home_adv=0,  variance=4)
lines(density(recordDist(gamesr)$Winp), col="green")
}
for(i in 1:20){
gamesr<-createRandomSeasons(1,  home_adv=0,  variance=1)
lines(density(recordDist(gamesr)$Winp), col="red")
}
games<- read.csv("C:/Users/andrew.lutes/Desktop/Project/Football/NFL_Ranking/NFL_Games.csv")
for(i in 2001:2013){
seas<-games %>% filter(SEAS == i)
lines(density(recordDist(seas)$Winp), col="black", lty=2)
}
plot(density(recordDist(gamesr)$Winp))
for(i in 2001:2013){
seas<-games %>% filter(SEAS == i)
lines(density(recordDist(seas)$Winp), col="black", lty=2)
}
for(i in 1:20){
gamesr<-createRandomSeasons(1,  home_adv=0,  variance=2)
lines(density(recordDist(gamesr)$Winp), col="red")
}
for(i in 1:20){
gamesr<-createRandomSeasons(1,  home_adv=0,  variance=1)
lines(density(recordDist(gamesr)$Winp), col="red")
}
density(recordDist(seas)$Winp)
table(recordDist(seas)$Winp)
table(recordDist(gamesp)$Winp)
h<-hist(recordDist(gamesp)$Winp)
h
br<-seq(0,1,.1)
br<-seq(0,1,.1)
h<-hist(recordDist(gamesp)$Winp, breaks=br)
br<-seq(0,1,.1)
h<-hist(recordDist(gamesp)$Winp, breaks=br)
shapiro.test(recordDist(gamesp)$Winp)
x<-recordDist(gamesp)$Winp
binom.test(x)
x
binom.test(x*16)
x*16
binom.test(c(x*16,(1-x)*16))
binom.test(x*16,n=(1-x)*16)
binom.test(x=x*16,n=(1-x)*16)
qqplot(rnorm(100), rbinom(100,16,.5)/16)
qqplot(rnorm(100,.5,sqrt(.5^2*n)), rbinom(100,n,.5)/n)
.5^2*n
n<-16
.5^2*n
qqplot(rnorm(100,.5,sqrt(.5^2*n)), rbinom(100,n,.5)/n)
rnorm(100,.5,sqrt(.5^2*n))
sqrt(.5^2*n)
qqplot(rnorm(100,n*p,sqrt(.5^2*n))/n, rbinom(100,n,.5)/n)
qqplot(rnorm(100,n*.5,sqrt(.5^2*n))/n, rbinom(100,n,.5)/n)
qqplot(rnorm(1000,n*.5,sqrt(.5^2*n))/n, rbinom(100,n,.5)/n)
qqplot(rnorm(1000,n*.5,sqrt(.5^2*n))/n, rbinom(1000,n,.5)/n)
qqplot(rnorm(1000,n*.5,sqrt(.5^2*n))/n, rbinom(1000000,n,.5)/n)
qqplot(runif(100), rbinom(1000,n,.5)/n)
abline(0,1)
qqplot(runif(100), rbinom(1000,n,.5)/n, xlim=x(0,1), ylim=c(0,1))
qqplot(runif(100), rbinom(1000,n,.5)/n, ylim=c(0,1))
abline(0,1)
x<-recordDist(gamesp)$Winp
qqplot(x ,runif(100), add=TRUE)
qqplot(, rbinom(1000,n,.5)/n, ylim=c(0,1), type="l")
qqplot(x, rbinom(1000,n,.5)/n, ylim=c(0,1), type="l")
qqplot(x ,runif(100), add=TRUE)
qqline(x ,runif(100), add=TRUE)
abline(0,1)
qqplot(x, rbinom(1000,n,.5)/n, ylim=c(0,1), type="l")
qqline(x ,runif(100), ylim=c(0,1), type="l")
qqplot(x ,runif(100), ylim=c(0,1), type="l")
qqplot(x, rbinom(1000,n,.5)/n, ylim=c(0,1), type="l")
qqplot(x ,runif(100), ylim=c(0,1), type="l")
abline(0,1)
qqplot(x ,runif(10000), ylim=c(0,1), type="l")
abline(0,1)
qqplot(x, rbinom(1000,n,.5)/n, ylim=c(0,1), type="l")
abline(0,1)
qqplot(x, rbinom(10000,n,.5)/n, ylim=c(0,1), type="l")
abline(0,1)
abline(0,1, lty=2)
qqplot(x ,runif(10000), ylim=c(0,1), type="l")
abline(0,1, lty=2)
q<-qqplot(x, rbinom(10000,n,.5)/n, ylim=c(0,1), type="l")
q
sum((q$x-q$y)^2)
q<-qqplot(x ,runif(10000), ylim=c(0,1), type="l")
un<-sum((q$x-q$y)^2)
un
