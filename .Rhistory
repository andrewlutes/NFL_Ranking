test<-attach_Pred_Rank(test,exp[[2]], "exp")
exp[[2]]
for(S in 2002:2013){
season=games[games$SEAS==S,]
cat("\n Season: ", S," ")
#Split Each week to creat power rankings and page rank based on the prior week
for(wk in sort(unique(games$WEEK))[-1]){
#Split apart training and test data
train=season[season$WEEK<wk,]
test=season[season$WEEK==wk,]
if(ptWeight){
train$Weight=train$Win_Margin
}else{
train$Weight=1
}
train$Weight= train$Weight+((train$home_win*2-1)*homeAdv)
train$Weight=train$Weight*(1-timeDep)^(wk-train$WEEK)
#Attach Social Network Measurements
g1 <- graph.data.frame(data.frame(from=train$Loser, to=train$Winner, weight=train$Weight))
adj=get.adjacency(g1, sparse=FALSE, attr="weight")
exp<-expWin(adj, schedDep=1)
exp[[2]]
test<-attach_Pred_Matrix(test,exp[[1]], "adj")
test<-attach_Pred_Rank(test,exp[[2]], "exp")
#Append this season
SEAShistory=rbind(SEAShistory, test)
cat(wk," ")
}
}
S<-2005
wk<-2
train=season[season$WEEK<wk,]
test=season[season$WEEK==wk,]
if(ptWeight){
train$Weight=train$Win_Margin
}else{
train$Weight=1
}
train$Weight= train$Weight+((train$home_win*2-1)*homeAdv)
train$Weight=train$Weight*(1-timeDep)^(wk-train$WEEK)
#Attach Social Network Measurements
g1 <- graph.data.frame(data.frame(from=train$Loser, to=train$Winner, weight=train$Weight))
adj=get.adjacency(g1, sparse=FALSE, attr="weight")
exp<-expWin(adj, schedDep=1)
test<-attach_Pred_Matrix(test,exp[[1]], "adj")
test<-attach_Pred_Rank(test,exp[[2]], "exp")
test
exp[[2]]
sum(predRanking)/nrow(predRanking
)
predRanking<-exp[[2]]
fill<-sum(predRanking)/nrow(predRanking)
fill
predRanking[is.na(predRanking)] <- fill
predRanking
name<-"exp"
test
test[,paste("h",name,sep="")]
predRanking[test$H]
test$H
predRanking[test$H]
predRanking
predRanking[test$V]
as.numeric(exp[[2]])
exp[[2]]
rank<-exp[[2]]
class(rank)
as.numeric(rank)
as.numeric(rank[,1])
test<-attach_Pred_Rank(test,rank, "exp")
rank<-as.numeric(rank[,1])
test<-attach_Pred_Rank(test,rank, "exp")
for(S in 2000:2013){
season=games[games$SEAS==S,]
cat("\n Season: ", S," ")
#Split Each week to creat power rankings and page rank based on the prior week
for(wk in sort(unique(games$WEEK))[-1]){
#Split apart training and test data
train=season[season$WEEK<wk,]
test=season[season$WEEK==wk,]
if(ptWeight){
train$Weight=train$Win_Margin
}else{
train$Weight=1
}
train$Weight= train$Weight+((train$home_win*2-1)*homeAdv)
train$Weight=train$Weight*(1-timeDep)^(wk-train$WEEK)
#Attach Social Network Measurements
g1 <- graph.data.frame(data.frame(from=train$Loser, to=train$Winner, weight=train$Weight))
adj=get.adjacency(g1, sparse=FALSE, attr="weight")
exp<-expWin(adj, schedDep=1)
rank<-exp[[2]]
rank<-as.numeric(rank[,1])
test<-attach_Pred_Matrix(test,exp[[1]], "adj")
test<-attach_Pred_Rank(test,rank, "exp")
#Append this season
SEAShistory=rbind(SEAShistory, test)
cat(wk," ")
}
}
addPred=function(games, predFunction, timeDep=0, ptWeight=FALSE, homeAdv=0, sched=1){
options(stringsAsFactors=FALSE)
games<- read.csv("C:/Users/andrew.lutes/Desktop/Project/Football/NFL_Games.csv")
#Add winners and Losers for each game
games$Winner=ifelse(games$home_win==1,games$H,games$V)
games$Loser=ifelse(games$home_win==0,games$H,games$V)
SEAShistory=NULL
for(S in sort(unique(games$SEAS))){
season=games[games$SEAS==S,]
cat("\n Season: ", S," ")
#Split Each week to creat power rankings and page rank based on the prior week
for(wk in sort(unique(games$WEEK))[-1]){
#Split apart training and test data
train=season[season$WEEK<wk,]
test=season[season$WEEK==wk,]
if(ptWeight){
train$Weight=train$Win_Margin
}else{
train$Weight=1
}
train$Weight= train$Weight+((train$home_win*2-1)*homeAdv)
train$Weight=train$Weight*(1-timeDep)^(wk-train$WEEK)
#Attach Social Network Measurements
g1 <- graph.data.frame(data.frame(from=train$Loser, to=train$Winner, weight=train$Weight))
adj=get.adjacency(g1, sparse=FALSE, attr="weight")
exp<-expWin(adj, schedDep=sched)
rank<-exp[[2]]
rank<-as.numeric(rank[,1])
test<-attach_Pred_Matrix(test,exp[[1]], "adj")
test<-attach_Pred_Rank(test,rank, "exp")
#Append this season
SEAShistory=rbind(SEAShistory, test)
cat(wk," ")
}
}
}
addPred=function(timeDep=0, ptWeight=FALSE, homeAdv=0, sched=1){
options(stringsAsFactors=FALSE)
games<- read.csv("C:/Users/andrew.lutes/Desktop/Project/Football/NFL_Games.csv")
#Add winners and Losers for each game
games$Winner=ifelse(games$home_win==1,games$H,games$V)
games$Loser=ifelse(games$home_win==0,games$H,games$V)
SEAShistory=NULL
for(S in sort(unique(games$SEAS))){
season=games[games$SEAS==S,]
cat("\n Season: ", S," ")
#Split Each week to creat power rankings and page rank based on the prior week
for(wk in sort(unique(games$WEEK))[-1]){
#Split apart training and test data
train=season[season$WEEK<wk,]
test=season[season$WEEK==wk,]
if(ptWeight){
train$Weight=train$Win_Margin
}else{
train$Weight=1
}
train$Weight= train$Weight+((train$home_win*2-1)*homeAdv)
train$Weight=train$Weight*(1-timeDep)^(wk-train$WEEK)
#Attach Social Network Measurements
g1 <- graph.data.frame(data.frame(from=train$Loser, to=train$Winner, weight=train$Weight))
adj=get.adjacency(g1, sparse=FALSE, attr="weight")
exp<-expWin(adj, schedDep=sched)
rank<-exp[[2]]
rank<-as.numeric(rank[,1])
test<-attach_Pred_Matrix(test,exp[[1]], "adj")
test<-attach_Pred_Rank(test,rank, "exp")
#Append this season
SEAShistory=rbind(SEAShistory, test)
cat(wk," ")
}
}
}
addPred()
addPred=function(timeDep=0, ptWeight=FALSE, homeAdv=0, sched=1){
options(stringsAsFactors=FALSE)
games<- read.csv("C:/Users/andrew.lutes/Desktop/Project/Football/NFL_Games.csv")
#Add winners and Losers for each game
games$Winner=ifelse(games$home_win==1,games$H,games$V)
games$Loser=ifelse(games$home_win==0,games$H,games$V)
SEAShistory=NULL
for(S in sort(unique(games$SEAS))){
season=games[games$SEAS==S,]
cat("\n Season: ", S," ")
#Split Each week to creat power rankings and page rank based on the prior week
for(wk in sort(unique(games$WEEK))[-1]){
#Split apart training and test data
train=season[season$WEEK<wk,]
test=season[season$WEEK==wk,]
if(ptWeight){
train$Weight=train$Win_Margin
}else{
train$Weight=1
}
train$Weight= train$Weight+((train$home_win*2-1)*homeAdv)
train$Weight=train$Weight*(1-timeDep)^(wk-train$WEEK)
#Attach Social Network Measurements
g1 <- graph.data.frame(data.frame(from=train$Loser, to=train$Winner, weight=train$Weight))
adj=get.adjacency(g1, sparse=FALSE, attr="weight")
exp<-expWin(adj, schedDep=sched)
rank<-exp[[2]]
rank<-as.numeric(rank[,1])
test<-attach_Pred_Matrix(test,exp[[1]], "adj")
test<-attach_Pred_Rank(test,rank, "exp")
#Append this season
SEAShistory=rbind(SEAShistory, test)
cat(wk," ")
}
}
return(SEAShistory)
}
history<-addPred()
history
addPred=function(timeDep=0, ptWeight=FALSE, homeAdv=0, sched=1){
options(stringsAsFactors=FALSE)
games<- read.csv("C:/Users/andrew.lutes/Desktop/Project/Football/NFL_Games.csv")
#Add winners and Losers for each game
games$Winner=ifelse(games$home_win==1,games$H,games$V)
games$Loser=ifelse(games$home_win==0,games$H,games$V)
games$winp=games$hwinP-games$vwinP
SEAShistory=NULL
for(S in sort(unique(games$SEAS))){
season=games[games$SEAS==S,]
cat("\n Season: ", S," ")
#Split Each week to creat power rankings and page rank based on the prior week
for(wk in sort(unique(games$WEEK))[-1]){
#Split apart training and test data
train=season[season$WEEK<wk,]
test=season[season$WEEK==wk,]
if(ptWeight){
train$Weight=train$Win_Margin
}else{
train$Weight=1
}
train$Weight= train$Weight+((train$home_win*2-1)*homeAdv)
train$Weight=train$Weight*(1-timeDep)^(wk-train$WEEK)
#Attach Social Network Measurements
g1 <- graph.data.frame(data.frame(from=train$Loser, to=train$Winner, weight=train$Weight))
adj=get.adjacency(g1, sparse=FALSE, attr="weight")
exp<-expWin(adj, schedDep=sched)
rank<-exp[[2]]
rank<-as.numeric(rank[,1])
test<-attach_Pred_Matrix(test,exp[[1]], "adj")
test<-attach_Pred_Rank(test,rank, "exp")
#Append this season
SEAShistory=rbind(SEAShistory, test)
cat(wk," ")
}
}
return(SEAShistory)
}
history<-addPred()
games$winp=games$hwinP-games$vwinP
games$hwinP-games$vwinP
games$hwinP
games$vwinP
games
addPred=function(timeDep=0, ptWeight=FALSE, homeAdv=0, sched=1){
options(stringsAsFactors=FALSE)
games<- read.csv("C:/Users/andrew.lutes/Desktop/Project/Football/NFL_Games.csv")
#Add winners and Losers for each game
games$Winner=ifelse(games$home_win==1,games$H,games$V)
games$Loser=ifelse(games$home_win==0,games$H,games$V)
games$winp=games$hWinP-games$vWinP
SEAShistory=NULL
for(S in sort(unique(games$SEAS))){
season=games[games$SEAS==S,]
cat("\n Season: ", S," ")
#Split Each week to creat power rankings and page rank based on the prior week
for(wk in sort(unique(games$WEEK))[-1]){
#Split apart training and test data
train=season[season$WEEK<wk,]
test=season[season$WEEK==wk,]
if(ptWeight){
train$Weight=train$Win_Margin
}else{
train$Weight=1
}
train$Weight= train$Weight+((train$home_win*2-1)*homeAdv)
train$Weight=train$Weight*(1-timeDep)^(wk-train$WEEK)
#Attach Social Network Measurements
g1 <- graph.data.frame(data.frame(from=train$Loser, to=train$Winner, weight=train$Weight))
adj=get.adjacency(g1, sparse=FALSE, attr="weight")
exp<-expWin(adj, schedDep=sched)
rank<-exp[[2]]
rank<-as.numeric(rank[,1])
test<-attach_Pred_Matrix(test,exp[[1]], "adj")
test<-attach_Pred_Rank(test,rank, "exp")
#Append this season
SEAShistory=rbind(SEAShistory, test)
cat(wk," ")
}
}
return(SEAShistory)
}
exp.roc=roc(formula=home_win~expdiff, data=history)
history<-addPred()
exp.roc=roc(formula=home_win~expdiff, data=history)
win.roc=roc(formula=home_win~winp, data=history)
library(proc)
library(pROC)
exp.roc=roc(formula=home_win~expdiff, data=history)
history
S<-2011
wk<-4
season=games[games$SEAS==S,]
train=season[season$WEEK<wk,]
test=season[season$WEEK==wk,]
train
if(ptWeight){
train$Weight=train$Win_Margin
}else{
train$Weight=1
}
train$Weight= train$Weight+((train$home_win*2-1)*homeAdv)
train$Weight=train$Weight*(1-timeDep)^(wk-train$WEEK)
train$Weight
g1 <- graph.data.frame(data.frame(from=train$Loser, to=train$Winner, weight=train$Weight))
adj=get.adjacency(g1, sparse=FALSE, attr="weight")
adj
expAdj=expm(schedDep*adj)-diag(dim(adj)[1])
schedDep=1
expAdj=expm(schedDep*adj)-diag(dim(adj)[1])
expAdj
expAdj=expAdj/(expAdj+t(expAdj)) #Scale so that each cell represents a unit probability
expAdj
colSums(expAdj, na.rm=TRUE)
rowSums(expAdj, na.rm=TRUE)
Exp=data.frame(name=row.names(adj), win=colSums(expAdj, na.rm=TRUE), loss=rowSums(expAdj, na.rm=TRUE))
Exp
Exp=data.frame(Pct=Exp$win/(Exp$win+Exp$loss))
Exp
row.names(Exp)<-row.names(adj)
Exp
attach_Pred_Matrix(test, expAdj)
attach_Pred_Matrix(test, expAdj, "adj")
attach_Pred_Rank(test, Exp, "adj")
attach_Pred_Rank(test, Exp, "exp")
Exp=data.frame(name=row.names(adj), win=colSums(expAdj, na.rm=TRUE), loss=rowSums(expAdj, na.rm=TRUE))
Exp$win/(Exp$win+Exp$loss)
Exp=as.numeric(Exp$win/(Exp$win+Exp$loss))
row.names(Exp)<-row.names(adj)
names(Exp)<-row.names(adj)
attach_Pred_Rank(test, Exp, "exp")
addPred=function(timeDep=0, ptWeight=FALSE, homeAdv=0, sched=1){
options(stringsAsFactors=FALSE)
games<- read.csv("C:/Users/andrew.lutes/Desktop/Project/Football/NFL_Games.csv")
#Add winners and Losers for each game
games$Winner=ifelse(games$home_win==1,games$H,games$V)
games$Loser=ifelse(games$home_win==0,games$H,games$V)
games$winp=games$hWinP-games$vWinP
SEAShistory=NULL
for(S in sort(unique(games$SEAS))){
season=games[games$SEAS==S,]
cat("\n Season: ", S," ")
#Split Each week to creat power rankings and page rank based on the prior week
for(wk in sort(unique(games$WEEK))[-1]){
#Split apart training and test data
train=season[season$WEEK<wk,]
test=season[season$WEEK==wk,]
if(ptWeight){
train$Weight=train$Win_Margin
}else{
train$Weight=1
}
train$Weight= train$Weight+((train$home_win*2-1)*homeAdv)
train$Weight=train$Weight*(1-timeDep)^(wk-train$WEEK)
#Attach Social Network Measurements
g1 <- graph.data.frame(data.frame(from=train$Loser, to=train$Winner, weight=train$Weight))
adj=get.adjacency(g1, sparse=FALSE, attr="weight")
exp<-expWin(adj, schedDep=sched)
test<-attach_Pred_Matrix(test,exp[[1]], "adj")
test<-attach_Pred_Rank(test,exp[[2]], "exp")
#Append this season
SEAShistory=rbind(SEAShistory, test)
cat(wk," ")
}
}
return(SEAShistory)
}
history<-addPred()
expWin <- function(adj, schedDep=1){
library(expm)
#Exponential Adjacency matrix
expAdj=expm(schedDep*adj)-diag(dim(adj)[1])
#Exponential based win pct
expAdj=expAdj/(expAdj+t(expAdj)) #Scale so that each cell represents a unit probability
#Find the exponential win and loss record for each team
Exp=data.frame(name=row.names(adj), win=colSums(expAdj, na.rm=TRUE), loss=rowSums(expAdj, na.rm=TRUE))
#Scale to find exponential win percentage
Exp=as.numeric(Exp$win/(Exp$win+Exp$loss))
names(Exp)<-row.names(adj)
return(list(expAdj, Exp))
}
history<-addPred()
exp.roc=roc(formula=home_win~expdiff, data=history)
win.roc=roc(formula=home_win~winp, data=history)
adj.roc=roc(formula=home_win~adjdiff, data=history)
plot.roc(exp.roc)
plot.roc(win.roc, add=TRUE, col="red")
plot.roc(adj.roc, add=TRUE, col="blue")
history<-addPred(timeDep=.05, ptWeight=TRUE, homeAdv=0.1, sched=0.8)
exp.roc=roc(formula=home_win~expdiff, data=history)
win.roc=roc(formula=home_win~winp, data=history)
adj.roc=roc(formula=home_win~adjdiff, data=history)
plot.roc(exp.roc)
plot.roc(win.roc, add=TRUE, col="red")
plot.roc(adj.roc, add=TRUE, col="blue")
history<-addPred(timeDep=.05, ptWeight=TRUE, homeAdv=2.2, sched=0.5)
exp.roc=roc(formula=home_win~expdiff, data=history)
win.roc=roc(formula=home_win~winp, data=history)
adj.roc=roc(formula=home_win~adjdiff, data=history)
plot.roc(exp.roc)
plot.roc(win.roc, add=TRUE, col="red")
plot.roc(adj.roc, add=TRUE, col="blue")
history<-addPred(timeDep=0, ptWeight=TRUE, homeAdv=0, sched=1)
exp.roc=roc(formula=home_win~expdiff, data=history)
win.roc=roc(formula=home_win~winp, data=history)
adj.roc=roc(formula=home_win~adjdiff, data=history)
plot.roc(exp.roc)
plot.roc(win.roc, add=TRUE, col="red")
plot.roc(adj.roc, add=TRUE, col="blue")
history<-addPred(timeDep=0.05, ptWeight=TRUE, homeAdv=0, sched=1)
exp.roc=roc(formula=home_win~expdiff, data=history)
win.roc=roc(formula=home_win~winp, data=history)
adj.roc=roc(formula=home_win~adjdiff, data=history)
plot.roc(exp.roc)
plot.roc(win.roc, add=TRUE, col="red")
plot.roc(adj.roc, add=TRUE, col="blue")
history<-addPred(timeDep=0.2, ptWeight=TRUE, homeAdv=0, sched=1)
exp.roc=roc(formula=home_win~expdiff, data=history)
win.roc=roc(formula=home_win~winp, data=history)
adj.roc=roc(formula=home_win~adjdiff, data=history)
plot.roc(exp.roc)
plot.roc(win.roc, add=TRUE, col="red")
plot.roc(adj.roc, add=TRUE, col="blue")
history<-addPred(timeDep=0.05, ptWeight=TRUE, homeAdv=2, sched=1)
history<-addPred(timeDep=0.05, ptWeight=TRUE, homeAdv=2, sched=1)
history<-addPred(timeDep=0.05, ptWeight=TRUE, homeAdv=.5, sched=1)
exp.roc=roc(formula=home_win~expdiff, data=history)
win.roc=roc(formula=home_win~winp, data=history)
adj.roc=roc(formula=home_win~adjdiff, data=history)
plot.roc(exp.roc)
plot.roc(win.roc, add=TRUE, col="red")
plot.roc(adj.roc, add=TRUE, col="blue")
history<-addPred(timeDep=0.05, ptWeight=TRUE, homeAdv=.5, sched=.5)
exp.roc=roc(formula=home_win~expdiff, data=history)
win.roc=roc(formula=home_win~winp, data=history)
adj.roc=roc(formula=home_win~adjdiff, data=history)
plot.roc(exp.roc)
plot.roc(win.roc, add=TRUE, col="red")
plot.roc(adj.roc, add=TRUE, col="blue")
library(rServe)
library(rserve)
library(Rserve)
rServe(Rserve)
Rserve()
x<-rnorm(100)
y<-rnorm(100)
x<-cbind(x,y)
kmeans(x,2)
k<kmeans(x,2)
k<-kmeans(x,2)
k$clusters
k$cluster
x<-10*rnorm(100)
y<-rnorm(100)
k<-kmeans(cbind(x,y),2)
plot(x,y,col=k$cluster)
k<-kmeans(scale(cbind(x,y)),2)
k$cluster
plot(x,y,col=k$cluster)
scale(cbind(x,y))
x<-10*rnorm(100)
y<-rnorm(100)
k<-kmeans(scale(cbind(x,y)),2)
k$cluster
plot(x,y,col=k$cluster)
x<-10*rnorm(100)
y<-rnorm(100)
k<-kmeans(scale(cbind(x,y)),2)
k$cluster
plot(x,y,col=k$cluster)
x<-10*rnorm(100)
y<-rnorm(100)
k<-kmeans(scale(cbind(x,y)),2)
k$cluster
plot(x,y,col=k$cluster)
x<-10*rnorm(100)
y<-rnorm(100)
k<-kmeans(scale(cbind(x,y)),2)
k$cluster
plot(x,y,col=k$cluster)
library(zipcode)
zip<-zipcode[zipcode$state %in% c("VA","MD","DE","WV"),]
write.csv(zip, "zip.csv")
zip
zipcode
data(zipcode)
zip<-zipcode[zipcode$state %in% c("VA","MD","DE","WV"),]
write.csv(zip, "zip.csv")
getwd()
zipcode
names(zipcode)
table(zipcode$state)
setwd("C:\\Users\\andrew.lutes\\Desktop\\Tech Talks")
zip<-zipcode[zipcode$state %in% c("DC"),]
write.csv(zip, "zip.csv")
zip
food<-read.csv("client_Location.csv")
summary(food)
hist(as.numeric(lat))
hist(as.numeric(food$lat))
